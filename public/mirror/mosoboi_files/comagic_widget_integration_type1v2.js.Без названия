!function (e) {
    var t = {};

    function r(o) {
        if (t[o]) return t[o].exports;
        var s = t[o] = {i: o, l: !1, exports: {}};
        return e[o].call(s.exports, s, s.exports, r), s.l = !0, s.exports
    }

    r.m = e, r.c = t, r.d = function (e, t, o) {
        r.o(e, t) || Object.defineProperty(e, t, {enumerable: !0, get: o})
    }, r.r = function (e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {value: "Module"}), Object.defineProperty(e, "__esModule", {value: !0})
    }, r.t = function (e, t) {
        if (1 & t && (e = r(e)), 8 & t) return e;
        if (4 & t && "object" == typeof e && e && e.__esModule) return e;
        var o = Object.create(null);
        if (r.r(o), Object.defineProperty(o, "default", {
            enumerable: !0,
            value: e
        }), 2 & t && "string" != typeof e) for (var s in e) r.d(o, s, function (t) {
            return e[t]
        }.bind(null, s));
        return o
    }, r.n = function (e) {
        var t = e && e.__esModule ? function () {
            return e.default
        } : function () {
            return e
        };
        return r.d(t, "a", t), t
    }, r.o = function (e, t) {
        return Object.prototype.hasOwnProperty.call(e, t)
    }, r.p = "", r(r.s = 0)
}([function (e, t) {
    window.CURS = function () {
        let e = function () {
            this instanceof e && (this.forms = [
                {
                    container: "div#form_k",
                    attr: "id",
                    value: "form_k",
                    page: "cooperation",
                    type: "reload",
                    success: {part: "search", text: "?success="}
                },
                {
                    page: "order/make/",
                    attr: "id",
                    value: "ORDER_FORM_ID_NEW",
                    type: "reload",
                    success: {part: "search", text: "?ORDER_IDD="}
                },
                {
                    attr: "action",
                    value: "/ajax/result/callback_order_result.php",
                    type: "ajax",
                    success: {element: "p.tac", text: "Ваша заявка принята", attribute: "innerText"}
                }, {
                    attr: "action",
                    value: "/ajax/result/showroom_order_result.php",
                    type: "ajax",
                    success: {element: "p.tac", text: "Ваша заявка принята", attribute: "innerText"}
                }, {
                    attr: "action",
                    value: "/ajax/result/showroom_callback_order_result.php",
                    type: "ajax",
                    success: {element: "p.tac", text: "Ваша заявка принята", attribute: "innerText"}
                },
                {
                    attr: "action",
                    value: "/ajax/result/podbor_order_result.php",
                    type: "ajax",
                    success: {element: "p.tac", text: "Ваша заявка отправлена", attribute: "innerText"}
                },
                {
                    attr: "action",
                    value: "/ajax/result/designer_order_result.php",
                    type: "ajax",
                    success: {element: "p.tac", text: "Ваша заявка отправлена", attribute: "innerText"}
                }
            ], this.mnemonic = {
                name: ["name", "ORDER_PROP_1", "ORDER_PROP_12", "best_name", "user_name"],
                phone: ["phone", "ORDER_PROP_3", "ORDER_PROP_14", "best_phone"],
                email: ["email", "ORDER_PROP_2", "ORDER_PROP_13", "best_email", "user_email"],
                form_name: ["form_name"],
                message: [{text: "Адрес шоу-рума", name: "ORDER_PROP_30"}, {
                    text: "Мне помогал продавец-консультант",
                    name: "js_withHelp"
                }, {text: "Адрес доставки с указанием города", name: "ORDER_PROP_7"}, {
                    text: "Город",
                    name: "ORDER_PROP_6"
                }, {text: "Город", name: "city_name"}, {
                    text: "Комментарий к заказу",
                    name: "ORDER_DESCRIPTION"
                }, {text: "Служба доставки", name: "DELIVERY_ID"}, {
                    text: "Платежная система",
                    name: "PAY_SYSTEM_ID"
                }, {text: "Комментарий", name: "message"}, {text: "Сообщение", name: "MESSAGE"}, {
                    text: "Комментарий",
                    name: "best_text"
                }, {text: "Содержимое заказа", name: "BASKET_ITEMS"}, {
                    text: "Название компании",
                    name: "ORDER_PROP_8"
                }, {text: "Юридический адрес", name: "ORDER_PROP_9"}, {
                    text: "ИНН",
                    name: "ORDER_PROP_10"
                }, {text: "КПП", name: "ORDER_PROP_11"}, {text: "ОГРН", name: "ORDER_PROP_20"}, {
                    text: "ОКПО",
                    name: "ORDER_PROP_21"
                }, {text: "БИК", name: "ORDER_PROP_22"}, {
                    text: "Наименование банка",
                    name: "ORDER_PROP_23"
                }, {text: "Расчётный счёт ", name: "ORDER_PROP_24"}, {
                    text: "Корреспондентский счёт",
                    name: "ORDER_PROP_25"
                }, {text: "Адрес доставки с указанием города", name: "ORDER_PROP_19"}, {
                    text: "Название формы",
                    name: "formName"
                }]
            }, this.config = {debug: !1, show_mutation: !1}, this.observerConfig = {
                childList: !0,
                attributes: !0,
                subtree: !0,
                attributeOldValue: !0
            }, this.frames = [], this.version = "0.6b")
        };
        return e.prototype.writeData = function (e) {
            let t = this.getData(e);
            this.formData = t, this.forms[this.currentForm] && this.forms[this.currentForm].formName && this.formData.push({
                name: "formName",
                value: this.forms[this.currentForm].formName
            }), this.forms[this.currentForm] && this.forms[this.currentForm].widget ? this.formData.push({
                name: "cWidget",
                value: this.forms[this.currentForm].widget
            }) : this.formData.push({
                name: "cWidget",
                value: "request"
            }), this.config.debug && (console.group("%c%s%s", "color: red;", "Запись данных формы №", this.currentForm), console.log(this.formData), console.groupEnd())
        }, e.prototype.addForm = function (e) {
            let t = {};
            if ("object" != typeof e) return new Error("Form data must be object!");
            e.type && "reload" == e.type ? e.type = "reload" : t.type = "ajax"
        }, e.prototype.getData = function (e) {
            let t = [], r = e.querySelectorAll("input, select, textarea");
            for (const e in r) if (r.hasOwnProperty(e)) {
                if (r[e].type && "radio" == r[e].type && !r[e].checked) continue;
                let o = [], s = "";
                if (r[e].hasAttribute("name")) o.push(r[e].name); else if (r[e].hasAttribute("id")) o.push(r[e].id); else {
                    if (!r[e].hasAttribute("class")) continue;
                    r[e].classList.forEach(e => {
                        o.push(e)
                    })
                }
                s = "SELECT" == r[e].tagName && r[e].querySelector('option[value="' + r[e].value.replace(/\"/g, '\\"') + '"]') ? r[e].querySelector('option[value="' + r[e].value.replace(/\"/g, '\\"') + '"]').innerText : r[e].value, o && s && o.forEach(e => {
                    t.push({name: e, value: s})
                })
            }
            if ("1" == this.currentForm) {
                t.forEach(e => {
                    "DELIVERY_ID" == e.name && (e.value = document.querySelector("input[name=DELIVERY_ID]:checked").dataset.name ? document.querySelector("input[name=DELIVERY_ID]:checked").dataset.name : ""), "PAY_SYSTEM_ID" == e.name && (e.value = document.querySelector("input[name=PAY_SYSTEM_ID]:checked").dataset.name ? document.querySelector("input[name=PAY_SYSTEM_ID]:checked").dataset.name : "")
                });
                let e = "";
                document.querySelectorAll(".bask_item_t").forEach(t => {
                    t.querySelectorAll(".bask_item_val").forEach(t => {
                        e += t.innerText ? t.innerText + " " : ""
                    })
                }), t.push({name: "BASKET_ITEMS", value: e})
            }
            return t
        }, e.prototype.saveData = function (e) {
            sessionStorage.setItem("formData", JSON.stringify(this.formData))
        }, e.prototype.createObject = function () {
            let e = {name: "", message: ""};
            if ("object" != typeof this.formData) {
                if (!sessionStorage.getItem("formData")) return !1;
                this.formData = JSON.parse(sessionStorage.getItem("formData")), sessionStorage.removeItem("formData")
            }
            let t = this.formData;
            for (const r in t) if (t.hasOwnProperty(r)) {
                this.mnemonic.name.forEach((function (o, s, n) {
                    t[r].name == o && (e.name += t[r].value + " ")
                })), this.mnemonic.phone.forEach((function (o, s, n) {
                    t[r].name == o && (e.phone = t[r].value)
                })), this.mnemonic.email.forEach((function (o, s, n) {
                    t[r].name == o && (e.email = t[r].value)
                })), this.mnemonic.form_name.forEach((function (o, s, n) {
                    t[r].name == o && (e.form_name = t[r].value)
                }));
                for (const o in this.mnemonic.message) this.mnemonic.message.hasOwnProperty(o) && t[r].name == this.mnemonic.message[o].name && "" != t[r].name && (e.message += this.mnemonic.message[o].text + " : " + t[r].value + "\n");
                "cWidget" == t[r].name && (e.cWidget = t[r].value)
            }
            return (!e.cWidget || "request" != e.cWidget && "call" != e.cWidget && "both" != e.cWidget) && (e.cWidget = "request"), delete this.formData, e
        }, e.prototype.formHandler = function (e) {
            let t;
            if (e.isTrusted) {
                for (const r in this.forms) if (this.forms.hasOwnProperty(r)) {
                    const o = this.forms[r].container || "form";
                    if (t = e.target.closest(o), t) break
                }
                if (t) for (const e in this.forms) if (this.forms.hasOwnProperty(e)) {
                    if (this.forms[e].attr && t.hasAttribute(this.forms[e].attr) && t.getAttribute(this.forms[e].attr).indexOf(this.forms[e].value) + 1) {
                        if (this.forms[e].page && !location.href.includes(this.forms[e].page)) continue;
                        this.currentForm = e, this.writeData(t), "reload" == this.forms[e].type && this.saveData(t);
                        break
                    }
                    if (this.forms[e].parent_attr && t.parentNode.hasAttribute(this.forms[e].parent_attr) && t.parentNode.getAttribute(this.forms[e].parent_attr).indexOf(this.forms[e].value) + 1) {
                        if (this.forms[e].page && !location.href.includes(this.forms[e].page)) continue;
                        this.currentForm = e, this.writeData(t), "reload" == this.forms[e].type && this.saveData(t);
                        break
                    }
                    if (this.forms[e].noAttr) {
                        if (this.forms[e].page && !location.href.includes(this.forms[e].page)) continue;
                        this.currentForm = e, this.writeData(t), "reload" == this.forms[e].type && this.saveData(t);
                        break
                    }
                }
            }
        }, e.prototype.waitingScript = function () {
            let e = this, t = 0, r = !1, o = setInterval((function () {
                if ((r || t > 40) && (clearInterval(o), r && (e.config.debug && console.log("GOOD"), e.sendData()), t > 40 && e.config.debug && console.log("BAD")), !window.Comagic) return;
                let s;
                r = !0, t++;
                try {
                    s = Comagic.getCredentials()
                } catch {
                    return
                }
                for (var n in s) s.hasOwnProperty(n) && (s[n] ? "hit_id" == n && isNaN(s[n]) && (r = !1) : r = !1)
            }), 500)
        }, e.prototype.sendData = function () {
            // console.log('sendData');
            // console.log(this.forms);
            for (const e in this.forms) if (this.forms.hasOwnProperty(e) && "reload" == this.forms[e].type) {
                let t = this.forms[e].success;
                if (t.part && document.location[t.part].indexOf(t.text) + 1) {
                    this.sendFormToCM();
                    break
                }
                if (t.element && document.querySelector(t.element)) {
                    if (t.attribute && document.querySelector(t.element).hasAttribute(t.attribute) && document.querySelector(t.element).getAttribute(t.attribute).indexOf(t.text) + 1) {
                        this.sendFormToCM();
                        break
                    }
                    if (t.property && document.querySelector(t.element)[t.property].indexOf(t.text) + 1) {
                        this.sendFormToCM();
                        break
                    }
                }
            }
        }, e.prototype.sendFormToCM = function () {
            let e = this.createObject();

            if (e) {
                let comagicData = new FormData();
                comagicData.append('data', JSON.stringify(e));

                fetch('/ajax/comagic/log.php', {
                    method: 'POST',
                    body: comagicData,
                });
                console.log('Отправка формы в Comagic', e);
            }

            e
                ? this.config.debug
                    ? (console.group("%c%s", "color: green;", "Отправка формы в CoMagic-> "), console.log(e), console.groupEnd())
                    : "request" == e.cWidget
                        ? (delete e.cWidget, window.Comagic && Comagic.addOfflineRequest && Comagic.addOfflineRequest(e))
                        : "call" == e.cWidget
                            ? (delete e.cWidget, window.Comagic && Comagic.sitePhoneCall && Comagic.sitePhoneCall(e))
                            : "both" == e.cWidget && (delete e.cWidget, window.Comagic && Comagic.addOfflineRequest && Comagic.addOfflineRequest(e) && Comagic.sitePhoneCall && Comagic.sitePhoneCall(e))
                : this.config.debug && (console.group("%c%s", "color: gray;", "Отсутствуют данные формы"), console.groupEnd())
        }, e.prototype.creteObserver = function () {
            let e = this;
            this.observer = new MutationObserver((function (t) {
                t.forEach((function (t) {
                    if ("attributes" == t.type && t.attributeName) {
                        e.config.show_mutation && (console.groupCollapsed("%c%s%s", "color: blue;", "Мутация атрибутов -> ", t.attributeName), console.dir(t), console.groupEnd());
                        for (const r in e.forms) if (e.forms.hasOwnProperty(r) && "ajax" == e.forms[r].type && t.target.parentElement && t.target.parentElement.querySelector(e.forms[r].success.element) == t.target && e.forms[r].success.attribute && e.forms[r].success.attribute == t.attributeName) if ("class" == e.forms[r].success.attribute) {
                            if (t.target.classList.contains(e.forms[r].success.text)) {
                                e.sendFormToCM();
                                break
                            }
                        } else {
                            if (t.target.getAttribute(e.forms[r].success.attribute) == e.forms[r].success.text) {
                                e.sendFormToCM();
                                break
                            }
                            if (t.target.getAttribute(t.oldValue && t.oldValue.includes(e.forms[r].success.oldText))) {
                                e.sendFormToCM();
                                break
                            }
                        }
                    }
                    if ("childList" == t.type && t.addedNodes) {
                        e.config.show_mutation && (console.groupCollapsed("%c%s%s", "color: pink;", "Добавление узлов -> ", t.addedNodes), console.dir(t), console.groupEnd());
                        for (const r in t.addedNodes) if (t.addedNodes.hasOwnProperty(r)) for (const o in e.forms) if (e.forms.hasOwnProperty(o) && "ajax" == e.forms[o].type) {
                            let s = e.forms[o].success;
                            if ("class" == e.forms[o].success.attribute) {
                                if (t.addedNodes[r] == t.target.querySelector(s.element) && (t.target.querySelector(s.element).classList.contains(e.forms[o].success.text) || t.oldValue.contains(e.forms[o].success.text) && !t.target.querySelector(s.element).classList.contains(e.forms[o].success.text))) {
                                    e.sendFormToCM();
                                    break
                                }
                            } else if ("text" == e.forms[o].success.attribute) {
                                if (3 == t.addedNodes[r].nodeType && t.addedNodes[r].textContent.includes(e.forms[o].success.text) && t.target == document.querySelector(s.element)) {
                                    e.sendFormToCM();
                                    break
                                }
                            } else if (t.addedNodes[r] == t.target.querySelector(s.element) && t.addedNodes[r][s.attribute].indexOf(s.text) + 1 || 3 == t.addedNodes[r].nodeType && t.addedNodes[r].textContent.indexOf(s.text) + 1 && t.target.parentElement && t.target.parentElement.querySelector(e.forms[r].success.element) == t.target) {
                                e.sendFormToCM();
                                break
                            }
                        }
                    }
                }))
            }))
        }, e.prototype.init = function () {
            this.creteObserver(), this.observer.observe(document, this.observerConfig), this.frames.forEach(e => {
                document.querySelector(e) && this.observer.observe(document.querySelector(e).contentDocument.body, this.observerConfig)
            }), document.addEventListener("click", this.formHandler.bind(this), !0), this.frames.forEach(e => {
                document.querySelector(e) && document.querySelector(e).contentDocument.addEventListener("click", this.formHandler.bind(this), !0)
            }, !0), this.waitingScript()
        }, new e
    }(), window.CURS.init()
}]);